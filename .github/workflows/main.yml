# Step 1: Checkout the repository code.
# This action checks out your repository's code so that subsequent steps can access the files.
- name: Checkout repository
uses: actions/checkout@v3

  # Step 2: Set up the Node.js environment.
  # The Azure Data Factory Utilities package requires Node.js to run.
  - name: Setup Node.js environment
    uses: actions/setup-node@v3.4.1
    with:
      node-version: 18.x

  # Step 3: Install the required npm packages.
  # This step navigates to your Data Factory folder and installs the packages listed in package.json.
  # The 'working-directory' is critical as it tells the command where to execute.
  - name: Install ADF Utilities package
    run: npm install
    working-directory: './Azure_adf_databricks_CICD/adf'

  # Step 4: Validate the Data Factory and generate the ARM template.
  # This command validates your Data Factory resources and exports a deployable ARM template.
  # It uses the `npm run build export` command from the ADF Utilities package.
  - name: Validate and Generate ARM template
    run: npm run build export ${{ github.workspace }}/Azure_adf_databricks_CICD/adf /subscriptions/0b20b9d7-36c2-4bfe-b032-85a274f0e38e/resourceGroups/myresourcegroup/providers/Microsoft.DataFactory/factories/adf-salesdata2025 "ExportedArmTemplate"
    working-directory: './Azure_adf_databricks_CICD/adf'

  # Step 5: Upload the generated ARM template as an artifact.
  # This makes the ARM template files available to the next job in the workflow (`release`).
  - name: Upload artifact
    uses: actions/upload-artifact@v4
    with:
      name: ExportedArmTemplate
      path: './Azure_adf_databricks_CICD/adf/ExportedArmTemplate'

release:
# This job depends on the build job completing successfully.
needs: build
# Specifies that this job also runs on an Ubuntu virtual machine.
runs-on: ubuntu-latest
steps:
# Step 6: Download the previously uploaded artifact.
# This step retrieves the ARM template files from the build job.
- name: Download a Build Artifact
uses: actions/download-artifact@v4
with:
name: ExportedArmTemplate

  # Step 7: Log in to Azure for deployment.
  # This action uses your GitHub secrets to authenticate with Azure.
  # The secrets (CLIENT_ID, TENANT_ID, SUBSCRIPTION_ID) should be configured in your repository settings.
  - name: Login via Az module
    uses: azure/login@v1
    with:
      client-id: ${{ secrets.CLIENT_ID }}
      tenant-id: ${{ secrets.TENANT_ID }}
      subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
      enable-AzPSSession: true

  # Step 8: Deploy the ARM template to the Data Factory.
  # This action uses the downloaded ARM template files to perform the deployment.
  - name: data-factory-deploy
    uses: Azure/data-factory-deploy-action@v1.2.0
    with:
      resourceGroupName: myresource
      dataFactoryName: adf-salaesdata2025-prod
      armTemplateFile: ARMTemplateForFactory.json
      armTemplateParametersFile: ARMTemplateParametersForFactory.json
